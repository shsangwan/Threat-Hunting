Credential Store Access by LOLBins (InstallUtil, Regsvr32, rundll32)
====================================================================
// Description: 
//  Detects attempts to access browser and application credential stores (such as "Login Data" and "cookies.sqlite") using living-off-the-land binaries (LOLBins) like InstallUtil.exe, Regsvr32.exe, or rundll32.exe. These Windows utilities are rarely used legitimately to read credential data but are often abused by malware to evade detection while harvesting stored credentials from browsers or applications.
// 
// Action on alert: 
// Investigate the process tree to determine whether the LOLBin execution is linked to suspicious or user-initiated activity. Verify if the accessing process is signed. Inspect for additional indicators of compromise, such as registry persistence or outbound network connections to unrecognized hosts.
// 
// Source: 
// https://www.seqrite.com/blog/snakekeylogger-a-multistage-info-stealer-malware-campaign/
// 
// Creator: 
// Shikha Sangwan 
// 
// QUERY:

let CredFiles = dynamic(["Login Data", "cookies.sqlite", "logins.json", "signons.sqlite"]);
DeviceFileEvents
| where FileName in (CredFiles)
| where InitiatingProcessFileName in~ ("InstallUtil.exe", "Regsvr32.exe", "rundll32.exe")
| project TimeGenerated, DeviceName, FileName, InitiatingProcessFileName, InitiatingProcessAccountName


Suspicious Rclone and Rsync Activity
====================================
// Description:
// This query detects activity related to rclone tool or process associated with Rsync. Both rclone and Rsync are legitimate tools commonly used for file synchronization and transfer. However, their presence or activity may also indicate potential data exfiltration or unauthorized file tansfers.
//
// Action on alert:
// Analyze the data tansfer activity associated with these processes. Look for large or unusual data transfers that might indicate data exfiltration. Check if the rclone and Rsync are signed. 
//
// Source:
// https://osintteam.blog/the-ultimate-black-basta-chat-leak-part-2-veeam-confluence-8b766c2182ac
// https://go.intel471.com/hubfs/Emerging%20Threats/Emerging%20Threat%20-%20Black%20Basta%20-%20March%202025.pdf?utm_campaign=Emerging%20Threats&utm_content=326489969&utm_medium=social&utm_source=linkedin&hss_channel=lcp-3744600
// https://www.security.com/threat-intelligence/ransomware-data-exfiltration
//
// Creator:
// Shikha Sangwan
//
// QUERY:
DeviceProcessEvents 
| where ProcessVersionInfoOriginalFileName contains "rclone" or FileName contains "rclone" or ProcessVersionInfoFileDescription contains "Rsync" 
| where not(ProcessVersionInfoFileDescription in~ ("OutlookGoogleCalendarSync", 'DirSync MFC Application')) 
| where FileName != "RcloneBrowser.exe" 
| project TimeGenerated, AccountDomain, AccountName, FileName, FolderPath, ProcessCommandLine, InitiatingProcessFileName, InitiatingProcessCommandLine, AdditionalFields


DNS Data Exfiltration via Encoded Query Strings (nslookup.exe)
==============================================================
// Description: 
// This query detects executions of nslookup.exe where its command line arguments contain long base64-like strings. Such usage indicates potential data exfiltration over DNS channelsâ€”a common attacker technique for bypassing standard network controls. Adversaries may encode sensitive information into DNS queries using living-off-the-land binaries like nslookup.exe.
// 
// Action on alert: 
// Review the command line arguments for encoded or suspicious data; attempt to decode if feasible to see what was transmitted. Correlate with DeviceNetworkEvents to determine external DNS destinations and possible data egress volume. Investigate the parent process and user account, for compromise.
// 
// Source: 
// https://cribl.io/blog/using-cribl-to-detect-data-exfil-over-dns-logs-in-real-time/
// 
// Creator: 
// Shikha Sangwan 
// 
// QUERY:
DeviceProcessEvents
| where FileName == "nslookup.exe"
| where ProcessCommandLine matches regex @"[A-Za-z0-9+]{20,}=" // Looks for long base64-like tokens
| project TimeGenerated, DeviceName, AccountUpn, FileName, ProcessCommandLine, InitiatingProcessFileName, FolderPath
| limit 100


