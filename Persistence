Persistence via Registry Run Key by LOLBins (InstallUtil, Regsvr32, rundll32)
===============================================================================
// Description: 
// Identifies attempts to create or modify Windows "Run" registry keys using LOLBins such as InstallUtil.exe or Regsvr32.exe. These events are indicative of persistence mechanisms where legitimate system tools are leveraged by adversaries to ensure malicious payloads are executed upon system startup.
// 
// Action on alert: 
// Review the created or modified registry values and associated binaries for signs of suspicious or unauthorized persistence. Validate whether the initiating process and executable path are expected or approved for legitimate administrative use. Search for follow-on activity related to credential access, data exfiltration, or lateral movement.
// 
// Source: 
//  https://www.seqrite.com/blog/snakekeylogger-a-multistage-info-stealer-malware-campaign/
// 
// Creator: 
// Shikha Sangwan 
// 
// QUERY:

DeviceRegistryEvents
| where RegistryKey contains @"\Software\Microsoft\Windows\CurrentVersion\Run"
| where InitiatingProcessFileName in~ ("InstallUtil.exe", "Regsvr32.exe", "rundll32.exe")
| project TimeGenerated, DeviceName, InitiatingProcessAccountName, RegistryKey, RegistryValueName, RegistryValueData, InitiatingProcessFileName


Suspicious Network Scanning via nmap.exe from Standalone Exe
=============================================================
// Description:  
// Detects the execution of nmap.exe from non-system directories to perform network scanning. This may indicate unauthorized reconnaissance or malicious activity using a standalone executable.
//
// Action on alert:  
// Investigate the process context, analyze command-line arguments for intent, and Identify the user account. Check for authority of User and confirm if the TargetIP scanned belongs to critical assets or sensitive infrastructure.
// 
// Creator:  
// Shikha Sangwan  
//
// Query:
DeviceProcessEvents
| where FileName contains "\nmap.exe"
| where not(FolderPath startswith @"C:\Windows") // Exclude common system directory
| where not(FolderPath startswith @"C:\Program Files") // Exclude another common directory
| where not(FolderPath startswith @"C:\Program Files (x86)") // Exclude 32-bit program folder
| extend TargetIP = extract(@"(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})", 1, ProcessCommandLine)
| project TimeGenerated, DeviceName, FileName, FolderPath, ProcessCommandLine, TargetIP, InitiatingProcessAccountName


Encoded Command Execution via Scheduled Tasks
============================================
// Description:  
// This query detects suspicious scheduled task creation or execution that uses obfuscated PowerShell commands (-EncodedCommand). Attackers use this technique to execute malicious payloads or maintain persistence.
//
// Action on alert:  
// Analyze the decoded payload to determine its nature. Investigate the initiating account and device context.  
//
// Source:  
// https://cybersecuritynews.com/chinese-salt-typhoon-hackers-exploiting-exchange-vulnerabilities/
//
// Creator:  
// Shikha Sangwan  
//
// Query:
DeviceEvents
| where ActionType == "ScheduledTaskCreated"
| extend Arguments = tostring(parse_json(tostring(AdditionalFields["TaskContent"]))["Actions"]["Exec"]["Arguments"])
| where Arguments contains "-EncodedCommand"
| extend DecodedCommand = tostring(base64_decode_tostring(extract(@'EncodedCommand\s([^\s]+)', 1, Arguments)))
| project TimeGenerated, DeviceName, InitiatingProcessAccountName, Arguments, DecodedCommand


Suspicious Windows Utilities Executed by IIS Worker Process (w3wp.exe)
=======================================================================
// Description:
// This query identifies instances where the IIS web server process (w3wp.exe) launches potentially suspicious Windows command-line utilities. Such activity is unusual in standard web server operations and may indicate exploitation via a web shell or unauthorized code execution. The detection focuses on a curated list of tools commonly leveraged by attackers.
//
// Action on alert:
// Examine the parent and child processes to determine if the execution chain is expected or anomalous. Analyze the full command line for signs of exploitation, such as references to unfamiliar scripts or directories. Check network activity for suspicious HTTP requests or file uploads in case their suspicious script involved.
//
// Source:
// https://github.com/nsacyber/Mitigating-Web-Shells
//
// Creator:
// Shikha Sangwan
//
// QUERY:
//
let suspicious_tools = dynamic(["arp.exe", "at.exe", "bitsadmin.exe", "certutil.exe", "cmd.exe", "dsget.exe", "dsquery.exe", "find.exe", "findstr.exe", "fsutil.exe", "hostname.exe", "ipconfig.exe", "nbstat.exe", "net.exe", "net1.exe", "netdom.exe", "netsh.exe", "netstat.exe", "nltest.exe", "nslookup.exe", "ntdsutil.exe", "pathping.exe", "ping.exe", "powershell.exe", "qprocess.exe", "query.exe", "qwinsta.exe", "reg.exe", "rundll32.exe", "sc.exe", "schtasks.exe", "systeminfo.exe", "tasklist.exe", "tracert.exe", "ver.exe", "vssadmin.exe", "wevtutil.exe", "whoami.exe", "wmic.exe", "wusa.exe"
]);
DeviceProcessEvents
| where InitiatingProcessFileName in~ ('w3wp.exe')
| where FileName in~ (suspicious_tools)
| where not(ProcessCommandLine has_any ('CyberArk', 'rdpsign'))
| project TimeGenerated, DeviceName, InitiatingProcessParentFileName, InitiatingProcessFileName, FileName, ProcessCommandLine, InitiatingProcessCommandLine, AccountName, FolderPath





