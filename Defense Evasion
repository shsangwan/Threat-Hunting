============================================================================================
Obfuscated Files or Information - Multiple Suspicious Temp Executables Linked to ACR Stealer
============================================================================================
// Description:  
// Detects devices that have more than one suspicious executable in the user's Temp directory matching a pattern observed in ACR stealer. The files are named with 10 uppercase characters and an .exe extension, e.g. "QQWSHIIISH.exe". Multiple files matching this pattern are dropped by the stealer. This may indicating potential malware presence or activity.
//
// Action on alert:  
// Investigate the detected files by analyzing their SHA256 hashes and checking in VT. Review initiating processes and validate the legitimacy of it. See from where the initiating file has come and verify whether it was a phishing website.
// 
// Creator:  
// Shikha Sangwan  
//
// Query:
let _timeframe = 40m;
DeviceFileEvents
| where TimeGenerated > ago(_timeframe)
| where FolderPath matches regex @"^C:\\Users\\[a-zA-Z0-9_-]+\\AppData\\Local\\Temp\\[A-Z]{10}\.exe$"
// Find devices with multiple files matching the suspicious pattern
| summarize Paths = make_set(FolderPath, 50), FolderPathCount = dcount(FolderPath) by DeviceName
| where FolderPathCount > 1
// Split out each file to an individual row
| mv-expand Paths
| extend Paths = tostring(Paths)
// Most fields have been lost in the summarize operator; populate them again by joining to the same table
| join kind=inner (
    DeviceFileEvents
    | where TimeGenerated > ago(_timeframe)
) on $left.Paths==$right.FolderPath
| project TimeGenerated, FileName, FolderPath, InitiatingProcessFileName, DeviceName, InitiatingProcessAccountUpn


Suspicious Rundll32.exe Execution
===================================
// Description:
// This query detects suspicious usage of rundll32.exe, commonly abused by adversaries to execute malicious code or load DLLs covertly. It checks for unusual command-line patterns, such as rare DLLs (.cdf, DllRegisterServer, comsvcs.dll) and flags (-sta, javascript:, \\share), which may indicate malicious activity.
//
// Action on alert:
// Ensure rundll32.exe is located in a legitimate system directory (C:\Windows\System32). Identify the initiating process and check if the file is signed or not. Analyse the origin of the initiating process.
//
// Source:
// https://www.linkedin.com/pulse/t1218011-rundll32-shahrukh-khan-6w2lf
// https://medium.com/@Wolverineisstillalive/system-binary-proxy-execution-rundll32-bypass-method-790871e1f2b7
// https://lolbas-project.github.io/lolbas/Binaries/Rundll32/
//
// Creator:
// Shikha Sangwan
//
// QUERY:
DeviceProcessEvents
| where FileName == "rundll32.exe"
| where ProcessCommandLine contains "rundll32" and ProcessCommandLine has_any ('.cdf','DllRegisterServer','cmd.exe',':temp.dll','EntryPoint','\\share','javascript:','w.run','-sta','ADSDLL.dll','comsvcs.dll')
| project TimeGenerated, DeviceName, FileName, FolderPath, ProcessCommandLine, InitiatingProcessFileName, InitiatingProcessCommandLine


==========================================================================================================
Obfuscated Files or Information: Compile After Delivery - Suspicious On-Host Compilation from User Folders
==========================================================================================================
// Description:
// Detects use of C# or C/C++ compilers compiling source code from user-writable or temporary directories (Downloads, AppData, Temp, etc.). This behavior is rare for legitimate software and can indicate "Compile After Delivery" techniques used by malware to evade detection by compiling payloads directly on the endpoint. The first 'where' clause below specifically detects activity detailed in linked intelligence: use of csc.exe to compile C# source dropped in AppData\Roaming\Microsoft\ (used by Cardinal RAT). The second branch is an *experimental hunt*: it flags use of common C-family compilers compiling from user-writable or temp folders, while excluding known IDE or common dev tool paths (e.g., Visual Studio, JetBrains, MinGW, MSYS2). To our knowledge, most real attack chains will still use legitimate compilers, but may attempt to evade by executing outside Program Files. This hunt is included to potentially discover new or rare attacker techniques, and may generate false positives, especially in developer-heavy or research environments. Please review and tune to your environment.
//
// Action on alert:
// Check if the activity is expected on this endpoint (e.g., not a developer machine). Review the command line, parent process, and file paths. Retrieve and analyze source and output files if possible. Investigate how the source file was delivered (e.g., phishing, web download, macro).
//
// Source:
// https://unit42.paloaltonetworks.com/unit42-cardinal-rat-active-two-years/
//
// Creator:
// Shikha Sangwan
//
// QUERY:
//
let cFamilyCompilers = dynamic([
    "gcc.exe", "g++.exe", "clang.exe", "clang++.exe",
    "mingw32-gcc.exe", "mingw32-g++.exe",
    "x86_64-w64-mingw32-gcc.exe", "x86_64-w64-mingw32-g++.exe",
    "cc.exe"
]);
let cFamilySourceExtensions = dynamic([".c", ".cpp", ".cxx", ".cc"]);
let suspiciousUserLocations = dynamic([
    @"\AppData\Local\Temp\",
    @"\AppData\LocalLow\Temp\",
    @"\AppData\Roaming\",
    @"\Downloads\",
    @"\Temporary Internet Files\",
    @"C:\Windows\Temp\",
    @"C:\Temp\"
]);
DeviceProcessEvents
| where
    ( FileName =~ "csc.exe"
      and ProcessCommandLine has ".cs"
      and ProcessCommandLine has @"AppData\Roaming\Microsoft\" )
    or
    (FileName in~ (cFamilyCompilers)
        and ProcessCommandLine has_any (cFamilySourceExtensions)
        and ( ProcessCommandLine has_any (suspiciousUserLocations)
              or ProcessCommandLine matches regex @"C:\\Users\\[^\\]+\\(Downloads|Desktop|Documents|AppData)\\" )
        and not (InitiatingProcessFolderPath has_any (
            @"Microsoft Visual Studio\",
            @"JetBrains\",
            @"MinGW\bin",
            @"MSYS2\",
            @"\Program Files\")
        )
    )
| project TimeGenerated, DeviceName, AccountName, InitiatingProcessFileName, InitiatingProcessFolderPath, InitiatingProcessCommandLine, FileName, ProcessCommandLine, InitiatingProcessAccountName
