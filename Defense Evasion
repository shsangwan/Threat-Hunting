============================================================================================
Obfuscated Files or Information - Multiple Suspicious Temp Executables Linked to ACR Stealer
============================================================================================
// Description:  
// Detects devices that have more than one suspicious executable in the user's Temp directory matching a pattern observed in ACR stealer. The files are named with 10 uppercase characters and an .exe extension, e.g. "QQWSHIIISH.exe". Multiple files matching this pattern are dropped by the stealer. This may indicating potential malware presence or activity.
//
// Action on alert:  
// Investigate the detected files by analyzing their SHA256 hashes and checking in VT. Review initiating processes and validate the legitimacy of it. See from where the initiating file has come and verify whether it was a phishing website.
// 
// Creator:  
// Shikha Sangwan  
//
// Query:
let _timeframe = 40m;
DeviceFileEvents
| where TimeGenerated > ago(_timeframe)
| where FolderPath matches regex @"^C:\\Users\\[a-zA-Z0-9_-]+\\AppData\\Local\\Temp\\[A-Z]{10}\.exe$"
// Find devices with multiple files matching the suspicious pattern
| summarize Paths = make_set(FolderPath, 50), FolderPathCount = dcount(FolderPath) by DeviceName
| where FolderPathCount > 1
// Split out each file to an individual row
| mv-expand Paths
| extend Paths = tostring(Paths)
// Most fields have been lost in the summarize operator; populate them again by joining to the same table
| join kind=inner (
    DeviceFileEvents
    | where TimeGenerated > ago(_timeframe)
) on $left.Paths==$right.FolderPath
| project TimeGenerated, FileName, FolderPath, InitiatingProcessFileName, DeviceName, InitiatingProcessAccountUpn

=================================================================
System Binary Proxy Execution - Suspicious Rundll32.exe Execution
=================================================================
// Description:
// This query detects suspicious usage of rundll32.exe, commonly abused by adversaries to execute malicious code or load DLLs covertly. It checks for unusual command-line patterns, such as rare DLLs (.cdf, DllRegisterServer, comsvcs.dll) and flags (-sta, javascript:, \\share), which may indicate malicious activity.
//
// Action on alert:
// Ensure rundll32.exe is located in a legitimate system directory (C:\Windows\System32). Identify the initiating process and check if the file is signed or not. Analyse the origin of the initiating process.
//
// Source:
// https://www.linkedin.com/pulse/t1218011-rundll32-shahrukh-khan-6w2lf
// https://medium.com/@Wolverineisstillalive/system-binary-proxy-execution-rundll32-bypass-method-790871e1f2b7
// https://lolbas-project.github.io/lolbas/Binaries/Rundll32/
//
// Creator:
// Shikha Sangwan
//
// QUERY:
DeviceProcessEvents
| where FileName == "rundll32.exe"
| where ProcessCommandLine contains "rundll32" and ProcessCommandLine has_any ('.cdf','DllRegisterServer','cmd.exe',':temp.dll','EntryPoint','\\share','javascript:','w.run','-sta','ADSDLL.dll','comsvcs.dll')
| project TimeGenerated, DeviceName, FileName, FolderPath, ProcessCommandLine, InitiatingProcessFileName, InitiatingProcessCommandLine


==========================================================================================================
Obfuscated Files or Information: Compile After Delivery - Suspicious On-Host Compilation from User Folders
==========================================================================================================
// Description:
// Detects use of C# or C/C++ compilers compiling source code from user-writable or temporary directories (Downloads, AppData, Temp, etc.). This behavior is rare for legitimate software and can indicate "Compile After Delivery" techniques used by malware to evade detection by compiling payloads directly on the endpoint. The first 'where' clause below specifically detects activity detailed in linked intelligence: use of csc.exe to compile C# source dropped in AppData\Roaming\Microsoft\ (used by Cardinal RAT). The second branch is an *experimental hunt*: it flags use of common C-family compilers compiling from user-writable or temp folders, while excluding known IDE or common dev tool paths (e.g., Visual Studio, JetBrains, MinGW, MSYS2). To our knowledge, most real attack chains will still use legitimate compilers, but may attempt to evade by executing outside Program Files. This hunt is included to potentially discover new or rare attacker techniques, and may generate false positives, especially in developer-heavy or research environments. Please review and tune to your environment.
//
// Action on alert:
// Check if the activity is expected on this endpoint (e.g., not a developer machine). Review the command line, parent process, and file paths. Retrieve and analyze source and output files if possible. Investigate how the source file was delivered (e.g., phishing, web download, macro).
//
// Source:
// https://unit42.paloaltonetworks.com/unit42-cardinal-rat-active-two-years/
//
// Creator:
// Shikha Sangwan
//
// QUERY:
//
let cFamilyCompilers = dynamic([
    "gcc.exe", "g++.exe", "clang.exe", "clang++.exe",
    "mingw32-gcc.exe", "mingw32-g++.exe",
    "x86_64-w64-mingw32-gcc.exe", "x86_64-w64-mingw32-g++.exe",
    "cc.exe"
]);
let cFamilySourceExtensions = dynamic([".c", ".cpp", ".cxx", ".cc"]);
let suspiciousUserLocations = dynamic([
    @"\AppData\Local\Temp\",
    @"\AppData\LocalLow\Temp\",
    @"\AppData\Roaming\",
    @"\Downloads\",
    @"\Temporary Internet Files\",
    @"C:\Windows\Temp\",
    @"C:\Temp\"
]);
DeviceProcessEvents
| where
    ( FileName =~ "csc.exe"
      and ProcessCommandLine has ".cs"
      and ProcessCommandLine has @"AppData\Roaming\Microsoft\" )
    or
    (FileName in~ (cFamilyCompilers)
        and ProcessCommandLine has_any (cFamilySourceExtensions)
        and ( ProcessCommandLine has_any (suspiciousUserLocations)
              or ProcessCommandLine matches regex @"C:\\Users\\[^\\]+\\(Downloads|Desktop|Documents|AppData)\\" )
        and not (InitiatingProcessFolderPath has_any (
            @"Microsoft Visual Studio\",
            @"JetBrains\",
            @"MinGW\bin",
            @"MSYS2\",
            @"\Program Files\")
        )
    )
| project TimeGenerated, DeviceName, AccountName, InitiatingProcessFileName, InitiatingProcessFolderPath, InitiatingProcessCommandLine, FileName, ProcessCommandLine, InitiatingProcessAccountName

==============================================================
Process Injection - Notepad.exe Spawned with SYSTEM Privileges
==============================================================
// Description:
// This query looks for notepad.exe spawned as SYSTEM. The SYSTEM integrity level suggests the system services/process and system level privilege. Notepad.exe should come under Medium which is default for most processes because it is for authenticated users. But in this case the threat actor spawns notepad.exe on a SYSTEM level. This may indicate a malicious application has injected into the notepad.exe process. 
//
// Action on alert:
// Check the folder path of notepad.exe and the initiating process. Look whether it is legitimate process, if yes then look at the process chain see if the initiating process is running with system privileges (Certain administrative tools or scripts may intentionally run applications with elevated privileges for testing or management purposes), in that case, allowlist.
//
// Source:
// https://www.microsoft.com/en-us/security/blog/2025/04/08/exploitation-of-clfs-zero-day-leads-to-ransomware-activity/
//    
// Creator:
// Shikha Sangwan
//
// Query:
DeviceProcessEvents
| where FileName contains "notepad.exe"
| where ProcessIntegrityLevel has 'system'
| project TimeGenerated, AccountDomain, DeviceName, AccountUpn, ProcessIntegrityLevel, FileName, FolderPath

==================================================================================
Disable or Modify System Firewall - Windows Firewall Profile Registry Modification
==================================================================================
// Description:
// This query monitors registry events related to changes in Windows Firewall profiles, specifically targeting the StandardProfile, DomainProfile, and PublicProfile registry keys. These keys are critical for configuring and managing firewall settings. GloballyOpenPorts under StandardProfile and DomainProfile are used to enable ports and PublicProfile is used to disable Firewall.
//
// Action on alert:
// Examine the initiating process responsible for regitry modification. Check whether the process is legitimate or not. Review the RegistryValueName and RegistryValueData to understand what specific changes were made to the firewall profiles. Determine if these changes could weaken security or allow unauthorized network access. Allowlist if legitimate.
//
// Source:
// https://www.cisa.gov/news-events/alerts/2018/03/15/russian-government-cyber-activity-targeting-energy-and-other-critical-infrastructure-sectors
//https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1562.004/T1562.004.md#atomic-test-1---disable-microsoft-defender-firewall
//
// Creator:
// Shikha Sangwan
//
// QUERY:
DeviceRegistryEvents
| where RegistryKey has_any (@"Services\SharedAccess\Parameters\FirewallPolicy\StandardProfile", @"Services\SharedAccess\Parameters\FirewallPolicy\DomainProfile", @"Services\SharedAccess\Parameters\FirewallPolicy\PublicProfile")
// Allowlist
| where InitiatingProcessCommandLine !contains "LocalServiceNoNetworkFirewall"
| where RegistryKey !contains "AuthorizedApplications"
| project TimeGenerated, DeviceName, RegistryKey, RegistryValueName, RegistryValueData, InitiatingProcessAccountDomain, InitiatingProcessCommandLine
| limit 100

=================================================================================
Disable or Modify System Firewall - Disable or Modify System Firewall using netsh
==================================================================================
// Description:
// This alert is triggered when there are process creation events involving the usage of the netsh command to modify the Windows firewall settings. The query specifically looks for commands that either, Disable the firewall and Add, delete, or set firewall rules that specify a local port. Additionally, the alert filters out known legitimate applications to reduce false positives. The alert is designed to detect potential malicious activity where an attacker may be attempting to modify firewall settings to bypass network security controls.
//
// Action on alert:
// Investigate the registry modification to verify its legitimacy. Review the initiating process and command line for any suspicious activity. If the modification is unauthorized or malicious, investigate the timeline to determine if the binary that initiated the change is malicious. Allowlist if false positive.
// When this alert is triggered, immediately investigate the details to determine legitimacy. If confirmed malicious, isolate the device, disable the compromised account, and revert any unauthorized firewall changes. Document the incident and notify the security team.
//
// Source:
// https://thedfirreport.com/2022/03/21/phosphorus-automates-initial-access-using-proxyshell/
// https://www.cisa.gov/news-events/alerts/2018/03/15/russian-government-cyber-activity-targeting-energy-and-other-critical-infrastructure-sectors
//
// Creator:
// Shikha Sangwan
//
// QUERY:
let alwaysIncludeNetshCommands = dynamic([
"advfirewall set allprofiles state on",
"advfirewall set allprofiles state off",
"firewall add allowedprogram",
"firewall delete allowedprogram",
"firewall set opmode disable"]);
let conditionalNetshCommands = dynamic([
"advfirewall firewall add rule",
"advfirewall firewall delete rule",
"advfirewall firewall set rule"]);
DeviceProcessEvents
| where ProcessCommandLine has "netsh"
| extend CommandLine = ProcessCommandLine
| where (CommandLine has_any(alwaysIncludeNetshCommands)) or (CommandLine has_any(conditionalNetshCommands) and CommandLine has "localport")
//Allowlist
| where CommandLine !contains ("WDS")
| where CommandLine !contains ("Relax")
| where CommandLine !contains ("HPDM")
| project-reorder TimeGenerated, DeviceName, AccountUpn, CommandLine, AccountDomain, FileName, InitiatingProcessFileName, InitiatingProcessFolderPath, ProcessVersionInfoProductName

==============================================================
Clear Windows Event Logs - Event Log Clearing via Wevtutil.exe
==============================================================
// Description:
// This query detects the use of the wevtutil.exe utility to clear event logs, which is a common tactic used by threat actors to cover their tracks and erase evidence of their activities. The query looks for process command lines that include "wevtutil.exe" along with commands like "cl" or "clear-log".
//
// Action on Alert:
// Investigate the source and intent of the wevtutil.exe execution, review the source file and associated account's recent activities. Allowlist if false positive.
// 
// Source:
// https://denwp.com/unexplored-lolbas-technique-wevtutil-exe/
// 
// Creator:
// Shikha Sangwan
//
// QUERY:
DeviceProcessEvents
| extend ProcessCommandLineToLower =  tolower(ProcessCommandLine)
| where ProcessCommandLineToLower has "wevtutil.exe" and ProcessCommandLineToLower has_any ("cl", "clear-log")
| project-reorder TimeGenerated, DeviceName, AccountSid, ProcessCommandLine, InitiatingProcessCommandLine 
| limit 100

===================================================================================
MSBuild - Suspicious network connection from MSBuild executing without command line
===================================================================================
// Description:
// Adveraries abuse MSBuild to avoid detection. This query looks for MSBuild executing without a command line, as observed in an attack chain from by RedCanary, and then making a network connection. 
//
// Action on alert:
// Check for the source and behaviour of MSBuild execution. Review the associated network activity for suspicious connections.
//
// Source:
// https://redcanary.com/blog/msix-installers/
//
// Creator:
// Shikha Sangwan
//
// QUERY:
DeviceNetworkEvents
| where InitiatingProcessFileName =~ "msbuild.exe"
| where isempty(InitiatingProcessCommandLine) or InitiatingProcessCommandLine =~ "msbuild.exe"
| project TimeGenerated, DeviceName, InitiatingProcessFileName, InitiatingProcessCommandLine, RemoteIP, RemotePort, Protocol
| limit 100




